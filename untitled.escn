[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.3976750075817108, 0.7546032667160034,
		0.8000000715255737, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.7470895051956177, 0.776313304901123,
		0.8000000715255737, 1.0);
	float node0_in4_metallic = float(0.10857142508029938);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.4000000059604645);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.010028025135397911, 0.8000000715255737,
		0.0084562748670578, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=4 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(3)

[sub_resource id=5 type="ArrayMesh"]

resource_name = "Cube"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.903277, -1.0, -0.903277, -0.903277, -1.0, 0.903277, -0.903277, -1.0, -0.903277, -1.0, 0.903277, 0.903277, -1.0, -0.903277, -0.903277, -1.0, -0.903277, 0.903277, 0.903277, 0.903277, 1.0, -0.903277, -0.903277, 1.0, 0.903277, -0.903277, 1.0, 1.0, 0.903277, -0.903277, 1.0, -0.903277, 0.903277, 1.0, -0.903277, -0.903277, 0.903277, -1.0, -0.903277, 0.903277, -0.903277, -1.0, 1.0, -0.903277, -0.903277, 1.0, -0.903277, 0.903277, 0.903277, -0.903277, 1.0, 0.903277, -1.0, 0.903277, -1.0, -0.903277, -0.903277, -0.903277, -0.903277, -1.0, -0.903277, -1.0, -0.903277, -0.903277, -1.0, 0.903277, -0.903277, -0.903277, 1.0, -1.0, -0.903277, 0.903277, -0.903277, -1.0, 0.903277, -1.0, -0.903277, -0.903277, -0.903277, -1.0, -0.903277, -0.903277, -1.0, -0.903277, 0.903277, -0.903277, -1.0, 0.903277, -1.0, -0.903277, 1.0, -0.903277, -0.903277, 0.903277, 0.903277, -1.0, 1.0, 0.903277, -0.903277, -0.903277, 0.903277, 1.0, -1.0, -0.903277, 0.903277, -0.903277, -0.903277, 1.0, 0.903277, -0.903277, 1.0, 1.0, 0.903277, 0.903277, 0.903277, 0.903277, 1.0, -0.903277, -0.903277, -1.0, -1.0, 0.903277, -0.903277, -0.903277, 0.903277, -1.0, 0.903277, -1.0, 0.903277, -0.903277, -0.903277, 1.0, -0.903277, -1.0, 0.903277, 0.903277, -1.0, -0.903277, 1.0, -0.903277, 0.903277, 0.903277, -1.0, 0.903277, -0.903277, 0.903277, -1.0, 0.903277, -0.903277, -1.0, -0.903277, -0.903277, -1.0, 0.903277, -1.0, 0.903277, -1.0, 0.903277, -0.903277, -0.903277, 0.903277, 1.0, 1.0, 0.903277, 0.903277, -1.0, -0.903277, 0.903277, -0.903277, -0.903277, -1.0, 0.903277, -0.903277, -1.0, -1.0, 0.903277, 0.903277, 1.0, -0.903277, 0.903277, -1.0, -0.903277, -0.903277, 0.903277, -0.903277, 1.0, 1.0, -0.903277, -0.903277, 0.903277, 0.903277, -1.0),
		Vector3Array(0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.57735, -0.57735, -0.57735, 0.57735, -0.57735, -0.57735, 0.57735, -0.57735, -0.57735, 0.57735, -0.57735, 0.57735, 0.57735, -0.57735, 0.57735, 0.57735, -0.57735, 0.57735, -0.57735, -0.57735, -0.57735, -0.57735, -0.57735, -0.57735, -0.57735, -0.57735, -0.57735, -0.57735, -0.57735, 0.57735, -0.57735, -0.57735, 0.57735, -0.57735, -0.57735, 0.57735, -0.707107, -0.707107, 0.0, -0.707107, -0.707107, 0.0, -0.707107, -0.707107, 0.0, 0.0, -0.707107, -0.707107, 0.0, -0.707107, -0.707107, 0.0, -0.707107, -0.707107, 0.707107, 0.0, -0.707107, 0.707107, 0.0, -0.707107, 0.707107, 0.0, -0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, 0.707107, 0.0, 0.707107, 0.707107, 0.0, 0.707107, 0.707107, 0.0, 0.707107, -0.707107, 0.0, -0.707107, -0.707107, 0.0, -0.707107, -0.707107, 0.0, -0.707107, 0.0, -0.707107, 0.707107, 0.0, -0.707107, 0.707107, 0.0, -0.707107, 0.707107, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -0.707107, -0.707107, 0.0, 0.0, -0.707107, -0.707107, 0.707107, 0.0, -0.707107, -0.707107, 0.0, 0.707107, 0.707107, 0.0, 0.707107, -0.707107, 0.0, -0.707107, 0.0, -0.707107, 0.707107, 0.707107, -0.707107, 0.0, 0.0, 0.0, -1.0),
		FloatArray(1.0, 0.0, -2.41554e-07, 1.0, 1.0, 0.0, -2.41554e-07, 1.0, 1.0, 0.0, -2.63949e-07, 1.0, 0.0, 1.0, 1.46106e-07, 1.0, 0.0, 1.0, 1.46106e-07, 1.0, 0.0, 1.0, 0.0, 1.0, 7.30531e-08, 1.0, 0.0, 1.0, 7.30531e-08, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, -1.46106e-07, 1.0, 0.0, 1.0, -1.46106e-07, 1.0, 0.0, 1.0, 0.0, 1.0, 0.707107, 0.707107, 0.0, 1.0, 0.707107, 0.707107, 0.0, 1.0, 0.707107, 0.707107, 0.0, 1.0, 0.707103, 0.70711, 6.97193e-06, 1.0, 0.707103, 0.70711, 6.97193e-06, 1.0, 0.707103, 0.70711, 6.97193e-06, 1.0, -0.707103, 0.70711, -6.97193e-06, 1.0, -0.707103, 0.70711, -6.97193e-06, 1.0, -0.707103, 0.70711, -6.97193e-06, 1.0, 0.70711, -0.707103, 6.97193e-06, 1.0, 0.70711, -0.707103, 6.97193e-06, 1.0, 0.70711, -0.707103, 6.97193e-06, 1.0, 0.707107, -0.707107, 6.77578e-06, 1.0, 0.707107, -0.707107, 3.09062e-06, 1.0, 0.707107, -0.707107, 2.89444e-06, 1.0, 1.0, 1.2699e-08, -1.2699e-08, 1.0, 1.0, 2.5125e-07, -2.5125e-07, 1.0, 1.0, 2.63949e-07, -2.63949e-07, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 3.17476e-09, 1.0, 3.17476e-09, 1.0, 6.28124e-08, 1.0, 6.28124e-08, 1.0, 6.59872e-08, 1.0, 6.59872e-08, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, -1.26989e-08, -1.26989e-08, 1.0, 1.0, -2.51247e-07, -2.51247e-07, 1.0, 1.0, -2.63946e-07, -2.63946e-07, 1.0, 0.707107, 0.707107, -1.85676e-07, 1.0, 0.707107, 0.707107, -3.67358e-06, 1.0, 0.707107, 0.707107, -3.85926e-06, 1.0, -1.46106e-07, 1.0, 0.0, 1.0, -1.46106e-07, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, -2.19159e-07, 1.0, 0.0, 1.0, 2.92212e-07, 1.0, 1.46106e-07, 1.0, 0.0, 1.0, 0.0, 1.0, -2.92212e-07, 1.0, 0.707107, -0.707107, 6.97196e-06, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.707107, 0.707107, 0.0, 1.0, -2.92212e-07, 1.0, 0.0, 1.0),
		ColorArray(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
		Vector2Array(0.61291, 0.23791, 0.38709, 0.0120905, 0.38709, 0.23791, 0.61291, 0.48791, 0.38709, 0.262091, 0.38709, 0.48791, 0.61291, 0.73791, 0.38709, 0.51209, 0.38709, 0.73791, 0.36291, 0.48791, 0.13709, 0.262091, 0.13709, 0.48791, 0.61291, 0.23791, 0.61291, 0.25, 0.625, 0.23791, 0.13709, 0.262091, 0.13709, 0.25, 0.125, 0.26209, 0.38709, 0.262091, 0.38709, 0.25, 0.375, 0.26209, 0.38709, 0.0120905, 0.38709, 0.0, 0.375, 0.0120904, 0.38709, 0.0120905, 0.375, 0.23791, 0.38709, 0.23791, 0.38709, 0.23791, 0.61291, 0.25, 0.61291, 0.23791, 0.13709, 0.48791, 0.36291, 0.5, 0.36291, 0.48791, 0.61291, 0.51209, 0.38709, 0.48791, 0.38709, 0.51209, 0.38709, 0.73791, 0.61291, 0.75, 0.61291, 0.73791, 0.63709, 0.48791, 0.86291, 0.5, 0.86291, 0.48791, 0.61291, 0.0120904, 0.38709, 0.0, 0.38709, 0.0120905, 0.61291, 0.23791, 0.625, 0.0120904, 0.61291, 0.0120904, 0.86291, 0.48791, 0.63709, 0.262091, 0.63709, 0.48791, 0.61291, 0.0120904, 0.61291, 0.26209, 0.61291, 0.51209, 0.36291, 0.26209, 0.375, 0.0120904, 0.38709, 0.25, 0.13709, 0.5, 0.61291, 0.48791, 0.38709, 0.75, 0.63709, 0.5, 0.61291, 0.0, 0.625, 0.23791, 0.86291, 0.26209),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 33, 35, 34, 36, 38, 37, 39, 41, 40, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0, 1, 51, 3, 4, 52, 6, 7, 53, 9, 10, 54, 24, 25, 55, 27, 28, 56, 30, 31, 57, 33, 34, 58, 36, 37, 59, 39, 40, 60, 42, 43, 61, 45, 46, 62, 48, 49, 63)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(4),
	"primitive":4,
	"arrays":[
		Vector3Array(-0.903277, 1.0, -0.903277, 0.903277, 1.0, 0.903277, 0.903277, 1.0, -0.903277, 0.903277, 0.903277, -1.0, 0.903277, 1.0, -0.903277, 1.0, 0.903277, -0.903277, 1.0, 0.903277, 0.903277, 0.903277, 1.0, 0.903277, 0.903277, 0.903277, 1.0, -0.903277, 0.903277, -1.0, -1.0, 0.903277, -0.903277, -0.903277, 1.0, -0.903277, -1.0, 0.903277, 0.903277, -0.903277, 0.903277, 1.0, -0.903277, 1.0, 0.903277, -0.903277, 1.0, 0.903277, 0.903277, 0.903277, 1.0, 0.903277, 1.0, 0.903277, 0.903277, 1.0, 0.903277, 1.0, 0.903277, -0.903277, 0.903277, 1.0, -0.903277, -0.903277, 1.0, -0.903277, -1.0, 0.903277, 0.903277, -0.903277, 1.0, 0.903277, 0.903277, 1.0, -0.903277, -0.903277, 0.903277, -1.0, -0.903277, 1.0, -0.903277, -0.903277, 1.0, 0.903277, -0.903277, 0.903277, 1.0, 1.0, 0.903277, 0.903277, -1.0, 0.903277, -0.903277, 0.903277, 0.903277, -1.0),
		Vector3Array(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.57735, 0.57735, -0.57735, 0.57735, 0.57735, -0.57735, 0.57735, 0.57735, -0.57735, 0.57735, 0.57735, 0.57735, 0.57735, 0.57735, 0.57735, 0.57735, 0.57735, 0.57735, -0.57735, 0.57735, -0.57735, -0.57735, 0.57735, -0.57735, -0.57735, 0.57735, -0.57735, -0.57735, 0.57735, 0.57735, -0.57735, 0.57735, 0.57735, -0.57735, 0.57735, 0.57735, 0.0, 0.707107, 0.707107, 0.0, 0.707107, 0.707107, 0.0, 0.707107, 0.707107, 0.707107, 0.707107, 0.0, 0.707107, 0.707107, 0.0, 0.707107, 0.707107, 0.0, -0.707107, 0.707107, 0.0, -0.707107, 0.707107, 0.0, -0.707107, 0.707107, 0.0, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 1.0, 0.0, 0.0, 0.707107, 0.707107, 0.707107, 0.707107, 0.0, -0.707107, 0.707107, 0.0, 0.0, 0.707107, -0.707107),
		FloatArray(-1.0, 0.0, -3.85886e-08, 1.0, -1.0, 0.0, -3.85886e-08, 1.0, -1.0, 0.0, -4.1242e-09, 1.0, -3.48597e-06, 0.707109, 0.707105, 1.0, -3.48597e-06, 0.707109, 0.707105, 1.0, -3.48597e-06, 0.707109, 0.707105, 1.0, -0.707105, 0.707109, -3.48597e-06, 1.0, -0.707105, 0.707109, -3.48597e-06, 1.0, -0.707105, 0.707109, -3.48597e-06, 1.0, -3.48599e-06, 0.707105, 0.707109, 1.0, -3.48599e-06, 0.707105, 0.707109, 1.0, -3.48599e-06, 0.707105, 0.707109, 1.0, 0.707109, 0.707105, 3.48599e-06, 1.0, 0.707109, 0.707105, 3.48599e-06, 1.0, 0.707109, 0.707105, 3.48599e-06, 1.0, -1.0, 3.17475e-09, -3.17475e-09, 1.0, -1.0, 6.28122e-08, -6.28122e-08, 1.0, -1.0, 6.5987e-08, -6.5987e-08, 1.0, -0.707107, 0.707107, 1.65913e-06, 1.0, -0.707107, 0.707107, 8.38583e-08, 1.0, -0.707107, 0.707107, 0.0, 1.0, -0.707107, -0.707107, 3.16516e-07, 1.0, -0.707107, -0.707107, -9.00052e-07, 1.0, -0.707107, -0.707107, -9.64814e-07, 1.0, -1.0, -1.98423e-10, -1.98423e-10, 1.0, -1.0, -3.92577e-09, -3.92577e-09, 1.0, -1.0, -4.1242e-09, -4.1242e-09, 1.0, -1.0, 0.0, -7.30531e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -0.707107, 0.707107, 1.74299e-06, 1.0, -0.707107, -0.707107, 3.81279e-07, 1.0, -1.0, 0.0, 0.0, 1.0),
		ColorArray(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
		Vector2Array(0.61291, 0.98791, 0.38709, 0.76209, 0.38709, 0.98791, 0.86291, 0.26209, 0.875, 0.26209, 0.86291, 0.25, 0.36291, 0.26209, 0.375, 0.26209, 0.36291, 0.25, 0.86291, 0.48791, 0.86291, 0.5, 0.875, 0.48791, 0.61291, 0.48791, 0.61291, 0.5, 0.625, 0.48791, 0.61291, 0.76209, 0.38709, 0.75, 0.38709, 0.76209, 0.38709, 0.76209, 0.375, 0.98791, 0.38709, 0.98791, 0.61291, 0.98791, 0.625, 0.76209, 0.61291, 0.76209, 0.38709, 0.98791, 0.61291, 1.0, 0.61291, 0.98791, 0.61291, 0.76209, 0.61291, 0.75, 0.375, 0.76209, 0.625, 0.98791, 0.38709, 1.0),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23, 22, 24, 26, 25, 0, 1, 27, 15, 16, 28, 18, 19, 29, 21, 22, 30, 24, 25, 31)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="Cube" type="MeshInstance" parent="."]

mesh = SubResource(5)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)
